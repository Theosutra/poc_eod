#!/usr/bin/env python3
"""
Script de d√©marrage rapide du POC EODEN
V√©rifie la configuration et lance le pipeline RAG
"""

import os
import sys
from pathlib import Path
import yaml
from dotenv import load_dotenv

def check_requirements():
    """V√©rifier les pr√©requis"""
    print("üîç V√©rification des pr√©requis...")
    
    issues = []
    
    # V√©rifier les fichiers de configuration
    required_files = {
        ".env": "Fichier des variables d'environnement",
        "config/settings.yaml": "Configuration principale", 
        "config/credentials.json": "Credentials Google Drive"
    }
    
    for file_path, description in required_files.items():
        if not Path(file_path).exists():
            issues.append(f"‚ùå {description} manquant: {file_path}")
        else:
            print(f"‚úÖ {description}: {file_path}")
    
    # V√©rifier les variables d'environnement
    load_dotenv()
    required_env = {
        "GEMINI_API_KEY": "Cl√© API Gemini (Google AI Studio)",
        "PINECONE_API_KEY": "Cl√© API Pinecone (optionnel si Elasticsearch)",
    }
    
    for env_var, description in required_env.items():
        if not os.getenv(env_var):
            if env_var == "PINECONE_API_KEY":
                print(f"‚ö†Ô∏è {description} manquant (OK si utilisation Elasticsearch)")
            else:
                issues.append(f"‚ùå {description} manquant: {env_var}")
        else:
            print(f"‚úÖ {description}: d√©fini")
    
    # V√©rifier les modules Python
    required_modules = [
        ("google.generativeai", "google-generativeai"),
        ("google.auth", "google-auth"), 
        ("googleapiclient", "google-api-python-client"),
        ("pymupdf", "pymupdf"),
        ("docx", "python-docx"),  # Module docx, package python-docx
        ("pptx", "python-pptx"),  # Module pptx, package python-pptx
        ("openpyxl", "openpyxl"),
        ("numpy", "numpy"),
        ("pandas", "pandas"),
        ("tqdm", "tqdm")
    ]
    
    missing_modules = []
    for module_name, package_name in required_modules:
        try:
            __import__(module_name)
            print(f"‚úÖ Module: {package_name}")
        except ImportError:
            missing_modules.append(package_name)
            issues.append(f"‚ùå Module manquant: {package_name}")
    
    if issues:
        print(f"\nüö® {len(issues)} probl√®mes d√©tect√©s:")
        for issue in issues:
            print(f"  {issue}")
        
        print(f"\nüìã Actions √† effectuer:")
        
        if missing_modules:
            print(f"1. Installer les modules manquants:")
            print(f"   pip install {' '.join(missing_modules)}")
        
        if not Path(".env").exists():
            print(f"2. Cr√©er le fichier .env avec vos cl√©s API:")
            print(f"   GEMINI_API_KEY=your_gemini_key")
            print(f"   PINECONE_API_KEY=your_pinecone_key")
        
        if not Path("config/credentials.json").exists():
            print(f"3. T√©l√©charger credentials.json depuis Google Cloud Console")
            print(f"   et le placer dans config/credentials.json")
        
        return False
    
    print(f"\n‚úÖ Tous les pr√©requis sont satisfaits!")
    return True

def setup_vector_store():
    """Configurer la base vectorielle"""
    print(f"\nüì¶ Configuration de la base vectorielle...")
    
    try:
        with open("config/settings.yaml", 'r') as f:
            config = yaml.safe_load(f)
        
        store_type = config['vector_store']['type']
        print(f"Type configur√©: {store_type}")
        
        if store_type == "pinecone":
            # V√©rifier Pinecone
            try:
                import pinecone
                api_key = os.getenv("PINECONE_API_KEY")
                if api_key:
                    print("‚úÖ Pinecone configur√©")
                    return True
                else:
                    print("‚ùå PINECONE_API_KEY manquant")
                    return False
            except ImportError:
                print("‚ùå Module pinecone-client manquant")
                print("   pip install pinecone-client")
                return False
        
        elif store_type == "elasticsearch":
            # V√©rifier Elasticsearch
            try:
                from elasticsearch import Elasticsearch
                hosts = config['vector_store']['elasticsearch']['hosts']
                es = Elasticsearch(hosts)
                if es.ping():
                    print("‚úÖ Elasticsearch accessible")
                    return True
                else:
                    print(f"‚ùå Elasticsearch non accessible sur {hosts}")
                    return False
            except ImportError:
                print("‚ùå Module elasticsearch manquant")
                print("   pip install elasticsearch")
                return False
            except Exception as e:
                print(f"‚ùå Erreur connexion Elasticsearch: {e}")
                return False
        
        else:
            print(f"‚ùå Type de base vectorielle non support√©: {store_type}")
            return False
    
    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
        return False

def test_google_drive():
    """Tester la connexion Google Drive"""
    print(f"\nüîó Test de connexion Google Drive...")
    
    try:
        sys.path.append('src')
        from drive_connector import test_connection
        
        if test_connection():
            print("‚úÖ Connexion Google Drive r√©ussie")
            return True
        else:
            print("‚ùå Connexion Google Drive √©chou√©e")
            return False
    
    except Exception as e:
        print(f"‚ùå Erreur test Google Drive: {e}")
        return False

def run_pipeline():
    """Ex√©cuter le pipeline principal"""
    print(f"\nüöÄ Lancement du pipeline RAG...")
    
    try:
        sys.path.append('src')
        from main import RAGPipeline
        
        # Cr√©er et ex√©cuter le pipeline
        pipeline = RAGPipeline()
        success = pipeline.run_full_pipeline()
        
        if success:
            print(f"\nüéâ Pipeline termin√© avec succ√®s!")
            
            # Afficher quelques statistiques
            stats = pipeline.get_stats()
            print(f"\nüìä Statistiques:")
            for key, value in stats.items():
                print(f"  {key}: {value}")
                
            return True
        else:
            print(f"\n‚ùå Pipeline √©chou√©")
            return False
    
    except Exception as e:
        print(f"‚ùå Erreur pipeline: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Point d'entr√©e principal"""
    print("=" * 60)
    print("üöÄ POC EODEN - G√©n√©ration automatique de notes d'investissement")
    print("üìã Pipeline RAG: Drive ‚Üí Chunking ‚Üí Embeddings ‚Üí Vector Store")
    print("=" * 60)
    
    # 1. V√©rifier les pr√©requis
    if not check_requirements():
        print(f"\n‚ùå Pr√©requis non satisfaits. Corrigez les probl√®mes et relancez.")
        return 1
    
    # 2. Configurer la base vectorielle
    if not setup_vector_store():
        print(f"\n‚ùå Configuration base vectorielle √©chou√©e.")
        return 1
    
    # 3. Tester Google Drive
    if not test_google_drive():
        print(f"\n‚ùå Test Google Drive √©chou√©.")
        return 1
    
    # 4. Demander confirmation
    print(f"\nüéØ Pr√™t √† lancer le pipeline complet!")
    response = input("Continuer? (y/N): ").strip().lower()
    
    if response not in ['y', 'yes', 'oui']:
        print("‚ùå Annul√© par l'utilisateur")
        return 0
    
    # 5. Ex√©cuter le pipeline
    if run_pipeline():
        print(f"\n‚úÖ POC termin√© avec succ√®s!")
        print(f"üìÑ Les r√©sultats sont disponibles dans data/output/")
        return 0
    else:
        print(f"\n‚ùå POC √©chou√©")
        return 1

if __name__ == "__main__":
    sys.exit(main())